// <auto-generated />
using System;
using LearnEF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LearnEF.Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20190820012649_InitialAspNetCore")]
    partial class InitialAspNetCore
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LearnEF.Domains.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("LearnEF.Domains.Company", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("LearnEF.Domains.Department", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("companyId");

                    b.HasKey("id");

                    b.HasIndex("companyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("LearnEf.Domains.CompanyCity", b =>
                {
                    b.Property<int>("CityId");

                    b.Property<int>("CompanyId");

                    b.HasKey("CityId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyCities");
                });

            modelBuilder.Entity("LearnEf.Domains.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("LearnEF.Domains.Department", b =>
                {
                    b.HasOne("LearnEF.Domains.Company", "company")
                        .WithMany("Departments")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LearnEf.Domains.CompanyCity", b =>
                {
                    b.HasOne("LearnEF.Domains.City", "City")
                        .WithMany("CompanyCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LearnEF.Domains.Company", "Company")
                        .WithMany("CompanyCities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LearnEf.Domains.Owner", b =>
                {
                    b.HasOne("LearnEF.Domains.Company", "Company")
                        .WithOne("Owner")
                        .HasForeignKey("LearnEf.Domains.Owner", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
